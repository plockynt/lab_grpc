// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: projects.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectTrackerClient is the client API for ProjectTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectTrackerClient interface {
	GetByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Project, error)
	GetAll(ctx context.Context, in *GetAllParams, opts ...grpc.CallOption) (ProjectTracker_GetAllClient, error)
	Save(ctx context.Context, in *Project, opts ...grpc.CallOption) (*SaveReturn, error)
}

type projectTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectTrackerClient(cc grpc.ClientConnInterface) ProjectTrackerClient {
	return &projectTrackerClient{cc}
}

func (c *projectTrackerClient) GetByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/grpcapi.ProjectTracker/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectTrackerClient) GetAll(ctx context.Context, in *GetAllParams, opts ...grpc.CallOption) (ProjectTracker_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectTracker_ServiceDesc.Streams[0], "/grpcapi.ProjectTracker/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectTrackerGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectTracker_GetAllClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type projectTrackerGetAllClient struct {
	grpc.ClientStream
}

func (x *projectTrackerGetAllClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectTrackerClient) Save(ctx context.Context, in *Project, opts ...grpc.CallOption) (*SaveReturn, error) {
	out := new(SaveReturn)
	err := c.cc.Invoke(ctx, "/grpcapi.ProjectTracker/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectTrackerServer is the server API for ProjectTracker service.
// All implementations must embed UnimplementedProjectTrackerServer
// for forward compatibility
type ProjectTrackerServer interface {
	GetByID(context.Context, *ID) (*Project, error)
	GetAll(*GetAllParams, ProjectTracker_GetAllServer) error
	Save(context.Context, *Project) (*SaveReturn, error)
	mustEmbedUnimplementedProjectTrackerServer()
}

// UnimplementedProjectTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectTrackerServer struct {
}

func (UnimplementedProjectTrackerServer) GetByID(context.Context, *ID) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedProjectTrackerServer) GetAll(*GetAllParams, ProjectTracker_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProjectTrackerServer) Save(context.Context, *Project) (*SaveReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedProjectTrackerServer) mustEmbedUnimplementedProjectTrackerServer() {}

// UnsafeProjectTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectTrackerServer will
// result in compilation errors.
type UnsafeProjectTrackerServer interface {
	mustEmbedUnimplementedProjectTrackerServer()
}

func RegisterProjectTrackerServer(s grpc.ServiceRegistrar, srv ProjectTrackerServer) {
	s.RegisterService(&ProjectTracker_ServiceDesc, srv)
}

func _ProjectTracker_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTrackerServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ProjectTracker/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTrackerServer).GetByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectTracker_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectTrackerServer).GetAll(m, &projectTrackerGetAllServer{stream})
}

type ProjectTracker_GetAllServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type projectTrackerGetAllServer struct {
	grpc.ServerStream
}

func (x *projectTrackerGetAllServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectTracker_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectTrackerServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ProjectTracker/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectTrackerServer).Save(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectTracker_ServiceDesc is the grpc.ServiceDesc for ProjectTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.ProjectTracker",
	HandlerType: (*ProjectTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _ProjectTracker_GetByID_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _ProjectTracker_Save_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _ProjectTracker_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "projects.proto",
}
